#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "placer.h"

int main(int argc, char *argv[]) {
		char auxFile[BUFFERSIZE], benchmarkPath[BUFFERSIZE], placefile[BUFFERSIZE];

  if(argc != 4) {
      printf("Usage: %s <benchmark_dir> <aux_file> <placement_file>\n",
             argv[0]);
      printf("    <benchmark_dir> is the benchmark file directory.\n");
      printf("    <aux_file> is the bookshelf format auxiliary file.\n");
      printf("    <placement_file> is the placement file.\n");
      exit(1);
  }    

  strcpy(benchmarkPath, argv[1]);
  strcpy(auxFile, argv[2]);
  strcpy(placefile, argv[3]);

  readAuxFile(benchmarkPath, auxFile);
  createHash(benchmarkPath, nodesFile);
  readNodesFile(benchmarkPath, nodesFile);
  readNetsFile(benchmarkPath, netsFile);
  readPlFile(benchmarkPath, placefile);
  freeHash();
  
  
  // init placement
  PLACEMENT P0 = initialPlacement(); 

  // setup the fixed matrices  
  setupCdxdy(); 
    
  // Compute the initial wirelength
  printf("\n Initial Wirelength = %lf\n",WireLength());
  
  // Constrained quadratic program
  // Setup Z and run CG
  
  // Partition[m] gives the parition of block m
  initPartitions();

  REGIONS Regions;
  Regions.currLevel = 0;
  
  // setup LCQP -- Linearly constrained quadratic program

  PLACEMENT P1 = globalPlace();  

  
  // Destroy  
  destroyMatrices();
  destroyPartitions();
  
  destroyPlacement(P0);

}
